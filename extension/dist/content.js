console.log("[AI Autocomplete] Content script loaded");let s=null,i=null,o=null;function r(){const e=document.createElement("span");return e.style.position="absolute",e.style.left="0",e.style.top="0",e.style.opacity="0.5",e.style.color="#666",e.style.pointerEvents="none",e}async function u(e){console.log("[AI Autocomplete] Fetching suggestion for input:",e);try{const t=await fetch("http://localhost:3000/api/autocomplete",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({input:e})});if(!t.ok)throw new Error("Failed to get suggestion");const n=await t.json();return console.log("[AI Autocomplete] Suggestion received:",n.suggestion),n.suggestion}catch(t){return console.error("[AI Autocomplete] Error getting suggestion:",t),null}}function d(e,t){var l;console.log("[AI Autocomplete] Updating ghost text:",t),o||(o=r(),(l=e.parentElement)==null||l.appendChild(o));const n=e.getBoundingClientRect();o.style.position="absolute",o.style.left=`${n.left}px`,o.style.top=`${n.top}px`,o.style.width=`${n.width}px`,o.style.height=`${n.height}px`,o.style.fontSize=window.getComputedStyle(e).fontSize,o.style.fontFamily=window.getComputedStyle(e).fontFamily,o.style.padding=window.getComputedStyle(e).padding,o.style.border=window.getComputedStyle(e).border,o.textContent=e.value+t}function a(e){const t=e.target;console.log("[AI Autocomplete] Input event detected:",t.value),i=null,o&&o.parentElement&&(console.log("[AI Autocomplete] Removing ghost element"),o.remove(),o=null),s&&clearTimeout(s),s=window.setTimeout(async()=>{const n=await u(t.value);n&&(i=n,d(t,n))},1e3)}function c(e){console.log("handleKeyDown");const t=e;if((t.key==="Tab"||t.key==="ArrowRight")&&i){console.log("[AI Autocomplete] Accepting suggestion with key:",t.key),t.preventDefault();const n=t.target;n.value+=i,i=null,o&&(o.remove(),o=null)}}function g(){const e=document.querySelectorAll('input:not([type="password"]), textarea');console.log(`[AI Autocomplete] Initializing. Found ${e.length} input(s)/textarea(s).`),e.forEach(t=>{t.addEventListener("input",a),t.addEventListener("keydown",c),console.log("[AI Autocomplete] Listener attached to:",t)})}document.addEventListener("DOMContentLoaded",g);const p=new MutationObserver(e=>{e.forEach(t=>{t.addedNodes.length&&document.querySelectorAll('input:not([type="password"]), textarea').forEach(l=>{l.hasAttribute("data-autocomplete-initialized")||(l.addEventListener("input",a),l.addEventListener("keydown",c),l.setAttribute("data-autocomplete-initialized","true"),console.log("[AI Autocomplete] Listener attached to (dynamic):",l))})})});p.observe(document.body,{childList:!0,subtree:!0});
