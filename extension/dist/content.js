console.log("[AI Autocomplete] Content script loaded");let l=null,s=null,e=null;function u(){const t=document.createElement("span");return t.style.position="absolute",t.style.left="0",t.style.top="0",t.style.opacity="0.5",t.style.color="#666",t.style.pointerEvents="none",t}async function d(t){console.log("[AI Autocomplete] Fetching suggestion for input:",t);try{const o=await fetch("http://localhost:3000/api/autocomplete",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({input:t})});if(!o.ok)throw new Error("Failed to get suggestion");const i=await o.json();return console.log("[AI Autocomplete] Suggestion received:",i.suggestion),i.suggestion}catch(o){return console.error("[AI Autocomplete] Error getting suggestion:",o),null}}function a(t){return t instanceof HTMLInputElement||t instanceof HTMLTextAreaElement?t.value:t instanceof HTMLElement&&t.isContentEditable?t.innerText:""}function p(t,o){t instanceof HTMLInputElement||t instanceof HTMLTextAreaElement?t.value=o:t instanceof HTMLElement&&t.isContentEditable&&(t.innerText=o)}function g(t,o){var i;if(console.log("[AI Autocomplete] Updating ghost text:",o),e||(e=u(),t instanceof HTMLInputElement||t instanceof HTMLTextAreaElement?(i=t.parentElement)==null||i.appendChild(e):t instanceof HTMLElement&&t.isContentEditable&&(t.appendChild(e),e.style.position="static",e.style.display="inline",e.style.opacity="0.5",e.style.color="#666",e.style.pointerEvents="none")),t instanceof HTMLInputElement||t instanceof HTMLTextAreaElement){const n=t.getBoundingClientRect();e.style.position="absolute",e.style.left=`${n.left}px`,e.style.top=`${n.top}px`,e.style.width=`${n.width}px`,e.style.height=`${n.height}px`,e.style.fontSize=window.getComputedStyle(t).fontSize,e.style.fontFamily=window.getComputedStyle(t).fontFamily,e.style.padding=window.getComputedStyle(t).padding,e.style.border=window.getComputedStyle(t).border,e.textContent=a(t)+o}else t instanceof HTMLElement&&t.isContentEditable&&(e.textContent=o)}function c(t){const o=t.target,i=a(o);console.log("[AI Autocomplete] Input event detected:",i),s=null,e&&e.parentElement&&(console.log("[AI Autocomplete] Removing ghost element"),e.remove(),e=null),l&&clearTimeout(l),l=window.setTimeout(async()=>{const n=await d(i);n&&(s=n,g(o,n))},1e3)}function r(t){console.log("handleKeyDown");const o=t,i=o.target;if((o.key==="Tab"||o.key==="ArrowRight")&&s){console.log("[AI Autocomplete] Accepting suggestion with key:",o.key),o.preventDefault();const n=a(i)+s;p(i,n),s=null,e&&(e.remove(),e=null)}}function f(){const t=document.querySelectorAll('input:not([type="password"]), textarea, [contenteditable="true"]');console.log(`[AI Autocomplete] Initializing. Found ${t.length} input(s)/textarea(s).`),t.forEach(o=>{o.addEventListener("input",c),o.addEventListener("keydown",r),console.log("[AI Autocomplete] Listener attached to:",o)})}document.addEventListener("DOMContentLoaded",f);const y=new MutationObserver(t=>{t.forEach(o=>{o.addedNodes.length&&document.querySelectorAll('input:not([type="password"]), textarea, [contenteditable="true"]').forEach(n=>{n.hasAttribute("data-autocomplete-initialized")||(n.addEventListener("input",c),n.addEventListener("keydown",r),n.setAttribute("data-autocomplete-initialized","true"),console.log("[AI Autocomplete] Listener attached to (dynamic):",n))})})});y.observe(document.body,{childList:!0,subtree:!0});
